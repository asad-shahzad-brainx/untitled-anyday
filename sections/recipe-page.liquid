{%- assign padding_bottom_desk = section.settings.padding_bottom_desk -%}
{%- assign padding_bottom_mob = section.settings.padding_bottom_mob -%}
{%- assign section_bg = section.settings.section_bg -%}
{%- assign recipe_hero_bg = section.settings.recipe_hero_bg -%}
{%- assign recipe_hero_bg_mobile = section.settings.recipe_hero_bg_mobile -%}
{%- assign recipe_bottom_bg = section.settings.recipe_bottom_bg -%}
{%- assign recipe_video_wrapper_opacity = section.settings.recipe_video_wrapper_opacity -%}
{%- assign recipe_video_wrapper_bg = section.settings.recipe_video_wrapper_bg | color_modify: 'alpha', recipe_video_wrapper_opacity -%}
{%- assign recipe_video_wrapper_opacity_mobile = section.settings.recipe_video_wrapper_opacity_mobile -%}
{%- assign recipe_video_wrapper_bg_mobile = section.settings.recipe_video_wrapper_bg_mobile | color_modify: 'alpha', recipe_video_wrapper_opacity_mobile -%}
{%- assign heading_bg_color = section.settings.heading_bg_color -%}
{%- assign heading_text_color = section.settings.heading_text_color -%}
{%- assign selected_variant = product.selected_or_first_available_variant -%}
{%- assign recomended_products = selected_variant.metafields.recommended_product.recommended_products | split: "|" -%}

{% comment %} Recommended products {% endcomment %}
{% if recomended_products == blank %}
	{% for custom_current_variant in product.variants %}
		{%- assign variant_size = product.selected_or_first_available_variant.option1 -%}

		{% if custom_current_variant.option1 == variant_size %}
			{%- assign recomended_products = custom_current_variant.metafields.recommended_product.recommended_products | split: "|" -%}

			{% break %}
		{% endif %}
	{% endfor %}
{% endif %}

{%- assign recipe_info_options_heading = section.settings.recipe_info_options_heading -%}
{%- assign hide_google_form = product.metafields.google_form.hide_section | default: section.settings.hide_google_form -%}
{%- assign google_block_bg_desktop = section.settings.google_block_bg_desktop -%}
{%- assign google_block_bg_mobile = section.settings.google_block_bg_mobile -%}
{%- assign google_form_button_label = section.settings.google_form_button_label -%}


{%- assign wattage_info = section.settings.wattage_info -%}
{%- assign video_wattage = section.settings.video_wattage -%}
{%- assign video_power_level = section.settings.video_power_level -%}
{%- assign power_level_info = section.settings.power_level_info -%}
{%- assign recipe_heading = product.title -%}
{%- assign recipe_description = product.description -%}
{%- assign recipe_image = product.featured_image -%}
{%- assign recipe_icon = product.metafields.accentuate.recipe_icon -%}
{%- assign suggestions = product.metafields.accentuate.suggestions -%}
{%- assign recipe_notes = product.metafields.accentuate.recipe_notes -%}
{%- assign ingredients = product.selected_or_first_available_variant.metafields.accentuate.ingredients -%}
{%- assign free_time = product.metafields.accentuate.free_time -%}
{%- assign total_time = product.selected_or_first_available_variant.metafields.accentuate.total_time -%}
{%- assign active_time = product.selected_or_first_available_variant.metafields.accentuate.active_time -%}
{%- assign preparation = product.selected_or_first_available_variant.metafields.accentuate.preparation -%}
{% comment %} {%- assign ingredients_heading = "products.recipe.recipe_info.ingredients_heading" | t -%}
{%- assign preparation_heading = "products.recipe.recipe_info.preparation_heading" | t -%}
{%- assign suggestions_heading = "products.recipe.recipe_info.suggestions_heading" | t -%}
{%- assign recipe_notes_heading = "products.recipe.recipe_info.recipe_notes_heading" | t -%}
{%- assign prep_time_heading = "products.recipe.times.prep_time_heading" | t -%}
{%- assign cook_time_heading = "products.recipe.times.cook_time_heading" | t -%} {% endcomment %}
{%- assign ingredients_heading = "Ingredients" %}
{%- assign preparation_heading = "Preparation" -%}
{%- assign suggestions_heading = "Suggestions" -%}
{%- assign recipe_notes_heading = "Recipe Notes" -%}
{%- assign prep_time_heading = "Prep Time" -%}
{%- assign cook_time_heading = "Cook Time" -%}

{% comment %}support of old recommended products {% endcomment %}

{%- assign medium_shallow = product.selected_or_first_available_variant.metafields.accentuate.medium_shallow -%}
{%- assign large_shallow = product.selected_or_first_available_variant.metafields.accentuate.large_shallow -%}
{%- assign medium_deep = product.selected_or_first_available_variant.metafields.accentuate.medium_deep -%}
{%- assign large_deep = product.selected_or_first_available_variant.metafields.accentuate.large_deep -%}
{%- assign small_dish = product.selected_or_first_available_variant.metafields.accentuate.small_dish -%}
{%- assign tbsp_anytime_tray = product.selected_or_first_available_variant.metafields.accentuate.tbsp_anytime_tray -%}
{%- assign cup_anytime_tray = product.selected_or_first_available_variant.metafields.accentuate.cup_anytime_tray -%}

{% comment %}support of old recommended products {% endcomment %}

{%- assign video_url = product.metafields.accentuate.recipes_video -%}
{%- assign video_type = 'youtube' -%}
{%- assign serves_title = section.settings.serves_title -%}
{%- assign wattage_title = section.settings.wattage_title -%}
{%- assign recommended_title = section.settings.recommended_title -%}
{%- assign error_message = section.settings.error_message -%}
{%- assign video_title = product.metafields.accentuate.video_title -%}

{%- capture slider_settings -%}
	{
	"slidesToShow": 2.3,
	"slidesToScroll": 1,
	"dots": false,
	"infinite": false,
	"useCSS": true,
	"responsive": [
	{
	"breakpoint": 1200,
	"settings": {
	"arrows": false
	}
	},
	{
	"breakpoint": 750,
	"settings": {
	"arrows": false,
	"slidesToShow": 2.1,
	"slidesToScroll": 1
	}
	}
	]
	}
{%- endcapture -%}

{% comment %}support of old recommended products {% endcomment %}
{% if recomended_products == blank %}
	{%- assign recomended_products = '' -%}

	{% for i in (1..7) %}
		{%- assign handle_index = "" -%}
		{%- assign handle =  "" -%}

		{%- assign handle_index = "handle_" | append: i -%}
		{%- assign handle =  section.settings[handle_index] | handleize -%}

		{% if handle != blank %}
			{%- assign variant_id =  all_products[handle].selected_or_first_available_variant.id -%}
		{% endif %}

		{% if medium_shallow and forloop.index == 1 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id | append: "|" -%}
		{% elsif large_shallow and forloop.index == 2 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id | append: "|" -%}
		{% elsif medium_deep and forloop.index == 3 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id | append: "|" -%}
		{% elsif large_deep and forloop.index == 4 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id | append: "|" -%}
		{% elsif small_dish and forloop.index == 5 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id | append: "|" -%}
		{% elsif tbsp_anytime_tray and forloop.index == 6 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id | append: "|" -%}
		{% elsif cup_anytime_tray and forloop.index == 7 %}
			{%- assign recomended_products = recomended_products | append: handle | append: ":" | append: variant_id -%}
		{% endif %}
	{% endfor %}

	{%- assign recomended_products = recomended_products | split: "|" -%}
{% endif %}
{% comment %}support of old recommended products {% endcomment %}

{%- assign slides_counter = recomended_products | split: ":" -%}
{%- assign slides_counter = slides_counter.size -%}

{% comment %} Automatization cook times {% endcomment %}
{%- assign free_time = product.metafields.accentuate.free_time -%}
{%- assign total_time = product.selected_or_first_available_variant.metafields.accentuate.total_time -%}
{%- assign variant_size = product.selected_or_first_available_variant.option1 -%}
{%- assign global_custom_current_variant = '' -%}

{% comment %} Automatization cook times v3 {% endcomment %}
{% if ingredients == blank or preparation == blank or active_time == blank or total_time == blank %}
	{% for custom_current_variant in product.variants %}
		{% if custom_current_variant.option1 == variant_size %}
			{%- assign global_custom_current_variant = custom_current_variant -%}

			{% if ingredients == blank %}
				{%- assign ingredients = custom_current_variant.metafields.accentuate.ingredients -%}
			{% endif %}

			{% if preparation == blank %}
				{%- assign preparation = custom_current_variant.metafields.accentuate.preparation -%}
			{% endif %}

			{% if active_time == blank %}
				{%- assign active_time = custom_current_variant.metafields.accentuate.active_time -%}
			{% endif %}

			{% break %}
		{% endif %}
	{% endfor %}
{% endif %}

{% if total_time != blank %}
	{%- assign default_total_time = true -%}
{% endif %}

{% comment %} Check serves count {% endcomment %}
{%- assign variant_options = product.selected_or_first_available_variant.options -%}
{%- assign variant_wattage = variant_options[1] -%}
{%- assign search_string = 'coefficient_' | append: variant_wattage -%}
{%- assign wattage_coefficients  = shop.metafields.globals[search_string] | default: 1 -%}

{%- for var in recomended_products -%}
  {%- assign var_handle = var | split: ':' | first -%}
  {%- assign product_item = all_products[var_handle] -%}

  {%- if recomended_product == blank -%}
    {%- assign recomended_product = product_item.title | downcase -%}
    {% break %}
  {%- endif -%}
{% endfor %}

{% for variant in product.variants %}
  {% if variant.option1 == variant_size %}
    {% for i in (1..4) %}
      {% assign power_level_str = 'power_level_' | append: i %}
      {% assign power_tag_str = '[[power-level-' |  append: i | append: ']]' %}
      {% assign power_level = variant.metafields.accentuate[power_level_str] %}

      {% if power_level %}
        {% assign wattage = variant_wattage | split: 'w' | first | times: 1 %}
        {% if wattage <= 800 %}
          {% assign level_reduction = 0 %}
        {% elsif wattage <= 1000 %}
          {% assign level_reduction = 1 %}
        {% elsif wattage <= 1200 %}
          {% assign level_reduction = 2 %}
        {% endif %}

        {% assign power_level = power_level | minus: level_reduction %}
        {% if recomended_product contains 'extra large' %}
          {% assign power_level = power_level |  plus: 1 | at_most: 10 %}
        {% endif %}

        {% if i == 1 %}
          {%- assign power_level_1 = 'Power Level ' | append: power_level -%}
        {% elsif i == 2 %}
          {%- assign power_level_2 = 'Power Level ' | append: power_level -%}
        {% elsif i == 3 %}
          {%- assign power_level_3 = 'Power Level ' | append: power_level -%}
        {% elsif i == 4 %}
          {%- assign power_level_4 = 'Power Level ' | append: power_level -%}
        {% endif %}
      {% endif %}

    {% endfor %}
  {% endif %}
{% endfor %}


{% if custom_tags_count == base_times_size_no_blank %}
	{% if default_total_time != true  %}
		{%- assign total_time = 0 -%}
	{% endif %}

	{% for i in (1..5) %}
		{%- assign basic_cook_time_str = 'basic_cook_time_' | append: i -%}
		{%- assign custom_tag_str = '[[cook-time-' | append: i | append: ']]' -%}
		{%- assign basic_cook_time = global_custom_current_variant.metafields.accentuate[basic_cook_time_str] -%}

		{% if basic_cook_time %}
			{%- assign result_time = basic_cook_time | times: wattage_coefficients -%}
			{%- assign local_time_floor = result_time | floor -%}
			{%- assign local_time_up = result_time | ceil -%}

			{% if local_time_floor != local_time_up %}
				{%- assign local_time = local_time_floor | append: '-' | append: local_time_up -%}
			{% else %}
				{%- assign local_time = local_time_floor -%}
			{% endif %}

			{% if default_total_time != true  %}
				{%- assign custom_tag_split_arr = preparation | split: custom_tag_str -%}
				{%- assign custom_tag_sizes = custom_tag_split_arr.size | minus: 1 -%}
				{%- assign result_time_local_tag = result_time | times: custom_tag_sizes -%}

				{%- assign total_time = total_time | plus: result_time_local_tag -%}
			{% endif %}

			{% if i == 1 %}
				{%- assign basic_cook_time_1 = local_time -%}
			{% elsif i == 2 %}
				{%- assign basic_cook_time_2 = local_time -%}
			{% elsif i == 3 %}
				{%- assign basic_cook_time_3 = local_time -%}
			{% elsif i == 4 %}
				{%- assign basic_cook_time_4 = local_time -%}
			{% elsif i == 5 %}
				{%- assign basic_cook_time_5 = local_time -%}
			{% endif %}

			{% if default_total_time != true %}
				{%- assign total_time_floor = total_time | floor -%}
				{%- assign total_time_up = total_time | ceil -%}

				{% if total_time_floor != total_time_up %}
					{%- assign total_time = total_time_floor | append: '-' | append: total_time_up | append: ' mins' -%}
				{% else %}
					{%- assign total_time = total_time_floor | append: ' mins' -%}
				{% endif %}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endif %}

{%- if video_url contains 'youtube' or video_url contains 'youtu' -%}
	{%- assign type = 'youtube' -%}
{%- elsif video_url contains 'vimeo' -%}
	{%- assign type = 'vimeo' -%}
{%- endif -%}

{%- assign video_id = video_url | split: '/' | last -%}

{{ 'recipe-page.css' | asset_url | stylesheet_tag }}
<style>
  .recipe__info-description {
	{% if video_url != blank %}
    --local-margin-bottom: 0
	{% else %}
    --local-margin-bottom: 32px
	{% endif %}
  }

  .video-footer-block {
    --recipe-video-wrapper-bg: {{ recipe_video_wrapper_bg }};
    --recipe-video-wrapper-bg-mobile: {{ recipe_video_wrapper_bg_mobile }};
  }
</style>

<div class="page-overlay"></div>
<div class="recipe">
  {% comment %} new code {% endcomment %}
  <div style="display: none;" class="recipe__info-heading large-down-hide" style="--bg-color: {{ heading_bg_color }}; --text-color: {{ heading_text_color }}">
		<div class="recipe__info-heading-content">
			{%- if recipe_heading != blank -%}
				<div class="recipe__info-heading-wrapper">
					<h1 itemprop="name" class="h1-new">{{ recipe_heading }}</h1>

					{%- if recipe_icon -%}
						<div class="recipe__info-icons-wrapper">
							{% for icon in recipe_icon %}
								{% comment %} {% render 'image-metafields', image: icon, class_name: , image_attr: , %} {% endcomment %}
							{% endfor %}
						</div>
					{%- endif -%}
				</div>
			{%- endif -%}

			<div class="recipe__info-heading-bottom">
				{% if product.metafields.junip.rating_count > 0 %}
					<div class="recipe__info-reviews-wrapper large-down-hide">
						{% render 'junip-product-summary', product: product %}

						<a href="#reviews-{{ product.id }}"
							 class="product__junip-summary-count">{{ product.metafields.junip.rating_count }} {{ 'products.product.junip_review_count' | t }}
						</a>

						<div class="recipe__microdata sr-only" itemprop="aggregateRating" itemscope itemtype="https://schema.org/AggregateRating">
							<span itemprop="ratingValue">{{ product.metafields.junip.rating_average }}</span>
							<span itemprop="reviewCount">{{ product.metafields.junip.rating_count }}</span>
						</div>
					</div>
				{% endif %}

				{%- if settings.recipe_wishlist -%}
					{%- render 'update-customer-wishlist', product: product, type: 'large' -%}
				{%- endif -%}
			</div>
		</div>
	</div>

	<div style="display: none;" class="recipe__content-wrapper container">
		<div class="recipe__image-block-wrapper">
			<div class="recipe__image-block" >
				<div class="recipe__image-block-wishlist-mobile-wrapper large-up-hide" style="--bottom:{% if video_url != blank %} 90px {% else %} 60px{% endif %};" >
					{%- comment -%}
						inner from JS
					{%- endcomment -%}
				</div>

				<span itemprop="image" class="visually-hidden">{{ recipe_image | img_url: '360x' }}</span>

				{% comment %} {% render 'image', image: recipe_image, class_name: , image_attr:, %} {% endcomment %}
				<span class="Image__Loader"></span>

				{% if video_url != blank %}
					<div class="video-footer-block">
						<button type="button" class="video-play image-with-review__btn-play"
										data-controls="Video-{{ section.id }}"
										data-id="{{ video_url }}" >
							{% include 'video-icon' %}
						</button>

						<div class="video-details">
							{%- if type == 'youtube' -%}
								{%- if video_title != blank -%}
									<span id="video-duration" class="video-duration large-down-hide">
                    {% comment %} {% render 'icon-spinner' %} {% endcomment %}
                  </span>
									<span id="video-title" class="data-value data-value__fields"> {{ video_title }} </span>
								{%- else -%}
									<span id="video-duration" class="video-duration large-down-hide">
                    {% comment %} {% render 'icon-spinner' %} {% endcomment %}
                  </span>
									<span id="video-title" class="video-title">
                    {% comment %} {% render 'icon-spinner' %} {% endcomment %}
                  </span>
								{%- endif -%}

							{%- else -%}
								<span id="video-title" class="video-title"> {{ video_title }} </span>
							{%- endif -%}
						</div>
					</div>
				{% else %}
					<div class="video-footer-block large-up-hide">
						<div class="video-details video-details--alt">
							<span class="product-title"> {{ product.title }} </span>

							{%- if recipe_icon -%}
								<div class="recipe__info-icons-wrapper">
									{% for icon in recipe_icon %}
										{% comment %} {% render 'image-metafields', image: icon, class_name: , image_attr: , %} {% endcomment %}
									{% endfor %}
								</div>
							{%- endif -%}
						</div>
					</div>
				{% endif %}
			</div>

			{%- if active_time != blank or total_time != blank or free_time != blank -%}
				<div class="recipe__times-block">
					<span itemprop="prepTime" class="sr-only">{{ active_time | split: " " | first | prepend: "PT" | append: "M" }}</span>
					<span itemprop="cookTime" class="sr-only">
            {%- if default_total_time != true -%}
							{{ total_time_floor | prepend: "PT" | append: "M" }}
						{%- else -%}
							{{ total_time | split: "mins" | first | split: '-' | first | strip | prepend: "PT" | append: "M"  }}
						{%- endif -%}
          </span>

					{%- if active_time != blank or total_time != blank -%}
						<div class="recipe__time-hero" style="--bg-color: {{ recipe_hero_bg }};  --bg-color-mobile: {{ recipe_hero_bg_mobile }};">
							{% if active_time != blank %}
								<div class="recipe__hero-block time--left">
									{% if prep_time_heading != blank %}
										<h2>{{ prep_time_heading }}</h2>
									{% endif %}

									<span>{{ active_time }}</span>
								</div>
							{% endif %}

							{% if total_time != blank %}
								<div class="recipe__hero-block time--right">
									{% if cook_time_heading != blank %}
										<h2>{{ cook_time_heading }}</h2>
									{% endif %}

									<span>{{ total_time }}</span>
								</div>
							{% endif %}
						</div>
					{%- endif -%}

					{% if product.metafields.junip.rating_count > 0 %}
						<div class="recipe__info-reviews-wrapper large-up-hide">
							{% render 'junip-product-summary', product: product %}

							<a href="#reviews-{{ product.id }}"
								 class="product__junip-summary-count">{{ product.metafields.junip.rating_count }} {{ 'products.product.junip_review_count' | t }}
							</a>
						</div>
					{% endif %}

					{%- if free_time != blank -%}
						<div class="recipe__time-bottom large-down-hide" style="background-color: {{ recipe_bottom_bg }}">
							<h2>Free Time</h2>
							{{ free_time }}
						</div>
					{%- endif -%}
				</div>
			{%- endif -%}

			<div class="recipe__info-social large-down-hide">
				<span class="recipe__info-copy-link">
          {% comment %} {% render 'icon-link' %}</span> {% endcomment %}
				<a href="javascript:(print());" class="recipe__info-print" aria-label="print">
					{% comment %} {% render 'icon-print' %} {% endcomment %}
				</a>

				{% include 'social-sharing', share_title: product.title, share_permalink: product.url, share_image: product.featured_image, share_description: product.description %}
			</div>
		</div>

		<div class="recipe__info-wrapper ">
			<div class="recipe__info-block" style="background-color: {{ section_bg }}">
				{%- if recipe_description != blank -%}
					<div itemprop="description" class="recipe__info-description">{{ recipe_description }}</div>
				{%- endif -%}

				{%- if product.tags.size > 0 -%}
					{%- assign keywords = '' -%}
					{%- assign categories = '' -%}

					{%- for tag in product.tags -%}
						{%- if tag contains '_wf_' -%}
							{% continue %}
						{%- endif -%}

						{%- assign new_item = tag | split: ': ' | last -%}

						{%- if tag contains 'Category:' -%}
							{%- assign categories = categories | append: ', ' | append: new_item -%}
						{%- endif -%}

						{%- assign keywords = keywords | append: ', ' | append: new_item -%}
					{%- endfor -%}

					<span itemprop="keywords" class="sr-only">{{ keywords | remove_first: ',' }}</span>

					{%- if categories.size > 0 -%}
						<span itemprop="recipeCategory" class="sr-only">{{ categories | remove_first: ',' }}</span>
					{%- endif -%}
				{%- endif -%}

				<div class="recipe__info-social large-up-hide">
					<span class="recipe__info-copy-link">
            {% comment %} {% render 'icon-link' %} {% endcomment %}
          </span>
					<a href="javascript:(print());" class="recipe__info-print" aria-label="print">
						{% comment %} {% render 'icon-print' %} {% endcomment %}
					</a>

					{% include 'social-sharing', share_title: product.title, share_permalink: product.url, share_image: product.featured_image, share_description: product.description %}
				</div>

				{%- if video_url != blank -%}
					<div class="image-with-review__video-block" data-section-id="{{ section.id }}"
							 data-section-type="video-section" data-controls="Video-{{ section.id }}">
						<div class="video-section-wrapper video-section-wrapper--{{ section.id }}"
								 data-desktop-height="100%" data-mobile-height="100%" data-video-type="{{ type }}">
							{%- if type == "youtube" -%}
								<div id="Video-{{ section.id }}" class="video" data-id="{{ video_id }}" data-type="image_with_play"></div>
							{%- endif -%}
							<button type="button" class="text-link video__close-wrapper"
											data-controls="Video-{{ section.id }}"

								{% if type == "youtube" %}
									data-id="{{ video_id }}"
								{% else %}
									data-id="{{ video_url }}"
								{% endif %}

								{% if type == "youtube" %}style="left: auto; right: 5px"{% endif %}>
								{% comment %} {% render 'icon-close' %} {% endcomment %}
							</button>
						</div>
					</div>
				{%- endif -%}

				<div id="recipe-time-block">
					{% if slides_counter > 1 %}
						<div class="recipe__info-recomended-product">
							<h2 class="recipe__info-recomended-product-label">{{ "products.recipe.recommended_products.label_desktop" | t }}</h2>

							<h2 class="recipe__info-recomended-product-label product--size">{{ "products.recipe.recommended_products.label_mobile" | t }}</h2>

							<div id="product_form_recipe-template" class="product_form_recipe_inner">
								<div class="recipe__info-product-list" data-slider-settings='{{ slider_settings }}'>
									{%- for var in recomended_products -%}
										{%- assign var_handle = var | split: ':' | first -%}
										{%- assign var_id = var | split: ':' | last | plus: 0 -%}
										{%- assign product_item = all_products[var_handle] -%}

										{%- if first_recomended_product == blank -%}
											{%- assign first_recomended_product = product_item.title -%}
										{%- endif -%}

										{%- for variant_item in product_item.variants -%}
											{%- assign variant_img = variant_item.image -%}

											{%- unless variant_item.image -%}
												{%- assign variant_img = product_item.featured_image -%}
											{%- endunless -%}

											{%- if variant_item.id == var_id -%}
												{% unless product_item == empty %}
													{% comment %} {% render 'product-bundle-card', product_item: product_item, variant_item: variant_item %} {% endcomment %}
												{% endunless %}
											{%- endif -%}
										{%- endfor -%}
									{%- endfor -%}
								</div>

								{%- assign btn_label = section.settings.btn_label -%}
								{%- assign btn_url = section.settings.btn_url -%}

								{% if btn_label != blank and btn_url != blank %}
									<a href="{{ btn_url }}" class="anyday-btn products-add-btn">
										{{ btn_label }}
									</a>
								{% endif %}
								{% comment %}<button{% endcomment %}
								{% comment %}type="submit"{% endcomment %}
								{% comment %}name="add"{% endcomment %}
								{% comment %}aria-label=" Add to cart"{% endcomment %}
								{% comment %}class="anyday-btn products-add-btn"{% endcomment %}
								{% comment %}btn--variant-id='{{ selected_variant.id }}'{% endcomment %}
								{% comment %}data-product-handle='{{ product.handle }}'{% endcomment %}
								{% comment %}data-add-to-cart>{% endcomment %}
								{% comment %}<span>{{ 'products.product.add_to_cart' | t }}</span>{% endcomment %}
								{% comment %}<span class="hide" data-loader=""> <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-spinner" viewBox="0 0 20 20"><path d="M7.229 1.173a9.25 9.25 0 1 0 11.655 11.412 1.25 1.25 0 1 0-2.4-.698 6.75 6.75 0 1 1-8.506-8.329 1.25 1.25 0 1 0-.75-2.385z" fill="#919EAB"></path></svg> </span>{% endcomment %}
								{% comment %}</button>{% endcomment %}
								{% comment %}{% endcomment %}
								{% comment %}<p class="recipe__product__error-message">{{ error_message }}</p>{% endcomment %}
							</div>
						</div>
					{% endif %}
				</div>
			</div>
		</div>
	</div>
  {% comment %} end new code {% endcomment %}

  {% unless product.has_only_default_variant %}
    <div class="recipe__info-settings">
      {% if recipe_info_options_heading != blank %}
        <p class="recipe__info-options-heading">
          {{ recipe_info_options_heading }}
        </p>
      {% endif %}

      {% form 'product', product, class:form_classes, novalidate: 'novalidate', data-product-form: '' %}
        {% unless product.has_only_default_variant %}
          {% for option in product.options_with_values %}
            <div class="recipe__info-options">
              <label style="display: none" id="SingleOptionLabel-{{ forloop.index0 }}"
                    {% if option.name == 'default' %}class="label--hidden"
                    {% endif %}for="SingleOptionSelector-{{ forloop.index0 }}">
                {{ option.name }}
              </label>
              <select
                      class="single-option-selector single-option-selector-{{ section.id }} product-form__input recipe__select-arrow"
                      id="SingleOptionSelector-{{ forloop.index0 }}"
                      data-index="option{{ forloop.index }}"
              >
                {% for value in option.values %}
                  <option value="{{ value | escape }}"{% if option.selected_value == value %} selected="selected"{% endif %}>{{ value }}</option>
                {% endfor %}
              </select>

              {% comment %}
                Custom Recipe Select
              {% endcomment %}

              <label id="SingleOptionLabel-{{ forloop.index0 }}"
                    class="{% if option.name == 'default' %}label--hidden{% endif %} {% if option.name == 'Wattage' %}label--wattage{% endif %}"
                    for="SingleOptionSelector-{{ forloop.index0 }}">
                {%- case option.name -%}
                  {%- when 'Serves' -%}
                    {%- assign option_name = serves_title -%}
                  {%- when 'Wattage' -%}
                    {%- assign option_name = wattage_title -%}
                {%- endcase -%}
                {{ option_name | default: option.name }}
              </label>
              {%- if option.name == 'Wattage' -%}
                {% if wattage_info != blank %}
                  <div class="wattage-level">
                    {% render 'tooltip' content: wattage_info, video: video_wattage, type: 'wattage' %}
                  </div>
                {% endif %}
              {%- endif -%}

              <div class="select select{{ forloop.index }}">
                <input class="select__input" type="hidden" name=""
                      id="SingleOptionSelector-{{ forloop.index0 }}"
                      data-index="option{{ forloop.index }}">
                {% if option.name == 'Wattage' %}
                  <span itemprop="tool" class="visually-hidden">Microwave oven by power - {{ option.selected_value }}</span>
                {%- endif -%}
                <div{% if option.name != 'Wattage' %} itemprop="recipeYield" {% endif %} class="select__head select__head{{ forloop.index }}">{{ option.selected_value }}</div>
                <ul 
                  class="select__list select__list{{ forloop.index }}" 
                  {% comment %}
                    style="display: none;"
                  {% endcomment %}
                >

                  {% for value in option.values %}
                    <li class="select__item"
                        value="{{ value | escape }}"{% if option.selected_value == value %} selected="selected"{% endif %}>{{ value }}</li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endfor %}
        {% endunless %}

        {%- if first_recomended_product != blank and recommended_title != blank -%}
          <div class="recipe__info-options">
            <div class="recipe__info-options-title">{{ recommended_title }}</div>

            <p class="recipe__info-options-product">
              {{ first_recomended_product }}
            </p>
          </div>
        {%- endif -%}

        <select name="id" id="ProductSelect-{{ section.id }}" class="product-form__variants no-js">
          {% for variant in product.variants %}
            <option value="{{ variant.id }}"{%- if variant == current_variant %} selected="selected" {%- endif -%}>
              {{ variant.title }}  {%- if variant.available == false %} - {{ 'products.product.sold_out' | t }}{% endif %}
            </option>
          {% endfor %}
        </select>
      {% endform %}

      <p class="visually-hidden" data-product-status
        aria-live="polite"
        role="status"
      ></p>
    </div>
  {% endunless %}
  <div class="page-width " id="recipe-info-block" style="--padding-bottom-desktop: {{ padding_bottom_desk }}px; --padding-bottom-mobile: {{ padding_bottom_mob }}px">

    {% if video_power_level != blank %}
      {%- assign video_power = '<video class="question-description__video-power question-description__video"
          id="videos" loop muted playsinline autoplay>
      <source src="' | append:  video_power_level | append: '" type="video/mp4">
                    </video>' -%}
    {% endif %}

    {%- assign power_level_tooltip =
      '<details class="question-tooltip__wrapper">
        <summary class="question-tooltip" role="tooltip" aria-label="'
      | append: "tooltip popup" | append:
      '">
        <svg xmlns="http://www.w3.org/2000/svg" id="Layer_3" class="icon-question-tooltip" data-name="Layer 3" viewBox="0 0 24 24"><defs><style>.cls-1{fill:#215957;}.cls-2{fill:#fff;}</style></defs><circle class="cls-1" cx="12" cy="12" r="10.5"/><path class="cls-2" d="M12.9,14.06v.66H10.8V14a3.06,3.06,0,0,1,.4-1.69,3.57,3.57,0,0,1,1-1,7.33,7.33,0,0,0,.88-.64A2.06,2.06,0,0,0,13.77,9a1.3,1.3,0,0,0-.45-1,1.78,1.78,0,0,0-1.25-.41,2.08,2.08,0,0,0-1.32.41,1.73,1.73,0,0,0-.61,1.24l-2-.37a3.91,3.91,0,0,1,1.3-2.45,4,4,0,0,1,2.75-.92,3.66,3.66,0,0,1,2.69,1,3.61,3.61,0,0,1,1,2.66,3.23,3.23,0,0,1-.42,1.71,4.81,4.81,0,0,1-1.18,1.27c-.29.24-.53.44-.71.62A1.89,1.89,0,0,0,12.9,14.06Zm-1.05,4.5a1.31,1.31,0,0,1-1-.39,1.13,1.13,0,0,1-.4-.84,1.6,1.6,0,0,1,.17-.77,1.13,1.13,0,0,1,1-.64,1.46,1.46,0,0,1,1.08.37,1.27,1.27,0,0,1,.37.94,1.31,1.31,0,0,1-.36.94A1.22,1.22,0,0,1,11.85,18.56Z"/></svg>
        <svg xmlns="http://www.w3.org/2000/svg" id="Layer_3" class="icon-question-tooltip-white" data-name="Layer 3" viewBox="0 0 24 24"><defs><style>.cls-1{fill:#215957;}.cls-2{fill:#fff;}</style></defs><circle class="cls-1" cx="12" cy="12" r="11"/><circle class="cls-2" cx="12" cy="12" r="10"/><path class="cls-1" d="M13,14.06v.66h-2.1V14a3.06,3.06,0,0,1,.4-1.69,3.57,3.57,0,0,1,1-1,6.58,6.58,0,0,0,.88-.64A2,2,0,0,0,13.9,9a1.3,1.3,0,0,0-.45-1,1.75,1.75,0,0,0-1.24-.41,2,2,0,0,0-1.32.41,1.73,1.73,0,0,0-.62,1.24l-2-.37A3.85,3.85,0,0,1,9.56,6.36a4,4,0,0,1,2.75-.92,3.65,3.65,0,0,1,2.69,1A3.57,3.57,0,0,1,16,9.1a3.23,3.23,0,0,1-.42,1.71,4.94,4.94,0,0,1-1.17,1.27,9.07,9.07,0,0,0-.72.62A1.89,1.89,0,0,0,13,14.06Zm-1,4.5a1.33,1.33,0,0,1-1-.39,1.16,1.16,0,0,1-.39-.84,1.6,1.6,0,0,1,.16-.77,1.13,1.13,0,0,1,1-.64,1.46,1.46,0,0,1,1.08.37,1.27,1.27,0,0,1,.37.94,1.31,1.31,0,0,1-.36.94A1.22,1.22,0,0,1,12,18.56Z"/></svg>
        </summary>
        <div class="question-description__wrapper">
          <span class="question-tooltip--close">&#10005;</span>
          <div class="question-description">'
      | append: power_level_info | append: video_power  | append:
      '
          </div>
        </div>
      </details>'
    -%}

    {%- if ingredients != blank or preparation != blank or suggestions != blank -%}
      <div class="recipe__info-bottom container">
        {% if ingredients != blank or preparation != blank %}
          {%- comment -%}    Automatization     {%- endcomment -%}
          {%- if ingredients_heading != blank -%}
            {%- assign ingredients = ingredients | remove_first: '<h2>Ingredients</h2>' -%}
          {%- endif -%}

          {%- if preparation_heading != blank -%}
            {%- assign preparation = preparation | remove_first: '<h2>Preparation</h2>' -%}
          {%- endif -%}

          <div class="recipe__bottom-row">
            {%- if ingredients != blank -%}
              {%- comment -%}
                Google Recipe Schema Markup (https://schema.org/Recipe)
              {%- endcomment -%}

              {%- assign ingredients_arr = ingredients | split: '<li>' -%}
              {%- assign ingredients = ingredients_arr | join: '<li itemprop="recipeIngredient">' -%}

              <div class="recipe__bottom-block recipe__bottom-block--ingredients">
                {% if ingredients_heading != blank %}
                  <h2>{{ ingredients_heading }}</h2>
                {% endif %}

                {{ ingredients }}
              </div>
            {%- endif -%}

            {% if preparation != blank %}
              {%- comment -%}
                Google Recipe Schema Markup (https://schema.org/Recipe)
              {%- endcomment -%}

              {%- assign preparation_arr = preparation | split: '<li>' -%}
              {%- assign preparation = preparation_arr | join: '<li itemprop="step">' -%}

              <div class="recipe__bottom-block recipe__bottom-block--preparation">
                {% if preparation_heading != blank %}
                  <h2>{{ preparation_heading }}</h2>
                {% endif %}

                {% if preparation contains 'tooltip' %}
                  {%- assign preparation_with_auto_cook_time = preparation
                    | replace: '[[cook-time-1]]', basic_cook_time_1
                    | replace: '[[cook-time-2]]', basic_cook_time_2
                    | replace: '[[cook-time-3]]', basic_cook_time_3
                    | replace: '[[cook-time-4]]', basic_cook_time_4
                    | replace: '[[cook-time-5]]', basic_cook_time_5
                    | replace: '[[power-level-1]]', power_level_1
                    | replace: '[[power-level-2]]', power_level_2
                    | replace: '[[power-level-3]]', power_level_3
                    | replace: '[[power-level-4]]', power_level_4
                    | replace: 'tooltip', power_level_tooltip
                  -%}

                  {%- assign preparation_with_tooltip = preparation_with_auto_cook_time -%}
                  {{ preparation_with_tooltip }}
                {% else %}
                  {%- assign preparation_with_auto_cook_time = preparation
                    | replace: '[[cook-time-1]]', basic_cook_time_1
                    | replace: '[[cook-time-2]]', basic_cook_time_2
                    | replace: '[[cook-time-3]]', basic_cook_time_3
                    | replace: '[[cook-time-4]]', basic_cook_time_4
                    | replace: '[[cook-time-5]]', basic_cook_time_5
                  -%}

                  {{ preparation_with_auto_cook_time }}
                {% endif %}
              </div>
            {% endif %}
          </div>
        {% endif %}

        {% if hide_google_form != true and hide_google_form != "true" and google_form_button_label != blank %}
          <div class="recipe__google-form large-up-hide" style="--bg-color-d: {{ google_block_bg_desktop }}; --bg-color-m: {{ google_block_bg_mobile }}">
            <button type="button" class="anyday-btn" data-drawer-id="{{ 'sections.google_form.form_id' | t }}" data-action="open-drawer">
              {{ google_form_button_label }}
            </button>
          </div>
        {% endif %}

        <div class="recipe__bottom-row">
          {%- if  suggestions != blank -%}
            <div class="recipe__bottom-block">
              {% if suggestions_heading != blank %}
                <h2>{{ suggestions_heading }}</h2>
              {% endif %}

              <div class="suggestions-wrapper">
                {{ suggestions }}
              </div>
            </div>
          {%- endif -%}

          {%- if recipe_notes != blank -%}
            <div class="recipe__bottom-block">
              {% if recipe_notes_heading %}
                <h2>{{ recipe_notes_heading }}</h2>
              {% endif %}

              <div class="recipe_notes-wrapper">
                {{ recipe_notes }}
              </div>
            </div>
          {%- endif -%}
        </div>
      </div>
    {%- endif -%}
  </div>
</div>

<script>
  const product = {{ product | json }};
  const singleOptionSelector = '.single-option-selector-{{ section.id }}';
  const container = document.querySelector(".recipe");
  const masterSelect = document.getElementById("ProductSelect-{{ section.id }}");

  function initSelect() {
    const selectContainerArr = document.querySelectorAll(".recipe__info-options:has(> select)");
    selectContainerArr.forEach(selectContainer => {
      selectContainer.querySelector("select.single-option-selector").style.display = 'none';
    })
  }

  initSelect();

  function getCurrentOptions() {
    const optionElements = Array.from(container.querySelectorAll(singleOptionSelector));
    const currentOptions = optionElements.map(element => {
      const type = element.getAttribute('type');
      const currentOption = {};
      
      if (type === 'radio' || type === 'checkbox') {
        if (element.checked) {
          currentOption.value = element.value;
          currentOption.index = element.dataset.index;
          return currentOption;
        } else {
          return false;
        }
      } else {
        currentOption.value = element.value;
        currentOption.index = element.dataset.index;
        return currentOption;
      }
    });

    // Filter out any `false` values from unchecked radio/checkbox inputs
    return currentOptions.filter(Boolean);
  }

  function getVariantFromOptions() {
    const selectedValues = getCurrentOptions();
    const variants = product.variants;
    
    const found = variants.find(variant => 
      selectedValues.every(values => 
        variant[values.index] === values.value
      )
    );

    return found;
  }

  function udpateUrl() {
    const variantId = masterSelect.value;
    const url = new URL(window.location.href);
    url.searchParams.set('variant', variantId);
    const newurl = url.toString();

		window.history.replaceState({ path: newurl }, '', newurl);
  }

  function updateMasterSelect() {
    const variant = getVariantFromOptions();
    masterSelect.value = variant.id;
    udpateUrl();
  }

  function updateVariant() {
    updateMasterSelect();
    const url = new URL(window.location.href);
    const currentUrl = url.toString();
    
    fetch(currentUrl)
    .then(response => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.text();
    })
    .then(data => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(data, "text/html");

      selectorsValues.forEach(item => {
        const dataBlock = doc.querySelector(item);
        const currentElement = document.querySelector(item);
        
        if (dataBlock) {
          currentElement.replaceWith(dataBlock);
          dataBlock.style.display = "block";
        } else {
          if (!currentElement) {
            return;
          }
          currentElement.style.display = "none";
        }
      });

      replaceVideoTooltip();
      // this._replacePowerLevel();
      // this._replaceVideoTooltip();
      // this._addPaddingInRecipesPage();
      // this._initRecommendedProductsSlider();

      // const bodyElem = document.body;
      // if (!bodyElem.classList.contains("version-b") || 
      //    (bodyElem.classList.contains("version-b") && window.innerWidth < 989)) {
      //   this._initProductSliders();
      // }
    })
    .catch(error => {
      console.error("Fetch error:", error);
    });
  }

  function toggleSelect(e) {
    e.target.closest(".select").classList.toggle("open");
  }

  function handleValueChange(e) {
    const target = e.target;
    const value = target.innerHTML;
    const head = target.closest(".select").querySelector(".select__head").innerHTML = value;
    target.closest(".recipe__info-options").querySelector(".single-option-selector").value = value;
    masterSelect.dispatchEvent(new Event("change", {bubbles: true}));
  }

  function replaceVideoTooltip() {
    const prefixChangeName = ['wattage','power']
    const $tooltip = document.querySelectorAll('.question-tooltip__wrapper');
    
    $tooltip.forEach(tooltip => {
      prefixChangeName.forEach(value => {
        // const $anchorTag = $tooltip.querySelector(`p:contains("[[video-${value}]]")`);
        // const $block = $tooltip.querySelector(`.question-description__video-${value}`);
        const $anchorTag = Array.from(tooltip.querySelectorAll("p")).find(p => p.textContent.includes(`[[video-${value}]]`));
        const $block = tooltip.querySelector(`.question-description__video-${value}`);
  
        console.log('custom | anchor', $anchorTag);
        console.log('custom | block', $block);
        if (!$anchorTag || !$block) return;
        
        $anchorTag.replaceWith($block)
      })
    })
  }

  replaceVideoTooltip();

  let selectors = {
    sliderProduct: '.product-template__slider',
    sliderProductVariantsThumb: '.product-template__thumbnails',
    details: '.product__details-wrapper--variant',
    selectValue: '.option-label__selected-value',
    text: '.variant-products__text',
    description: '.product__description-variant',
    bundle_products: '.product__bundle-wrapper',
    variantTitleTablet: '.desktop-sticky-pdp__variant--hidden-tablet',
    recipeTimeBlock: '#recipe-time-block',
    recipeInfoBlock: '#recipe-info-block',
    ingredientCookTimes: '.ingredient-pdp__cook-times-wrapper',
    ingredientGrainPowerLevel: '.ingredient-pdp-grain__power-level-wrapper',
    ingredientGrainCookTimes: '.ingredient-pdp-grain__cook-times-wrapper',
    freeShippingBtn: '.desktop-sticky-pdp__inner .product-add-btn',
    freeShippingIcon: '.desktop-sticky-pdp__inner .product-shipping-small-massage-set',
    freeShippingVariant: '.desktop-sticky-pdp__inner .desktop-sticky-pdp__variant',
    freeShippingVariantCounter: '.desktop-sticky-pdp__inner .product-form__input--quantity',
    freeShippingLabelMobile: '.free-shipping-label-m',
    freeShippingLabelDesktop: '.free-shipping-label-d',
    promoBubble: '.product-template-bundle--version-b .product__promo-bubble-wrapper',
    promoBubbleOldTemplate: '.product-template-bundle:not(.product-template-bundle--version-b) .product-single__meta.product-single__meta-bundle .product__promo-bubble-wrapper',
    promoBubbleOldTemplateMobile: '.product-template-bundle:not(.product-template-bundle--version-b) .product-single__meta.product-single__meta-bundle .product__promo-bubble-wrapper--mobile',
    recipeTable: '.text-with-table--js .text-with-table__table-wrapper--js',
    recipeTime: '.recipe__time-hero',
    recommendedProductTitle: '.recipe__info-options-product',
    deliver: '.product-form__deliverr-wrapper'
  }

  const selectorsValues = Object.values(selectors);

  document.addEventListener('click', (event) => {
    const selects = document.querySelectorAll('.select');
    
    selects.forEach((select) => {
      if (select.classList.contains('open') && 
          (!select.contains(event.target) || 
          (event.target.closest('.select') && event.target.closest('.select') !== select))) {
        select.classList.remove('open');
      }
    });
  });

  
  document.querySelectorAll(".recipe__info-settings .select").forEach(select => select.addEventListener("click", toggleSelect));
  document.querySelectorAll(".recipe__info-settings .select li").forEach(option => option.addEventListener("click", handleValueChange));
  document.querySelectorAll(".recipe__info-settings select").forEach(select => select.addEventListener("change", updateVariant));
  
  document.addEventListener('click', (event) => {
    const tooltips = document.querySelectorAll('.question-tooltip__wrapper');
    tooltips.forEach((tooltip) => {
      if (tooltip.open && (!tooltip.contains(event.target) || event.target.classList.contains("question-tooltip--close"))) {
        tooltip.removeAttribute('open');
      }
    });
  });

</script>

{% schema %}
  {
    "name": "Recipe Page",
    "settings": [
    {
      "type": "header",
      "content": "Recipe info paddings"
    },
    {
      "type": "range",
      "id": "padding_bottom_desk",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom desktop",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom_mob",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom mobile",
      "default": 15
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "section_bg",
      "label": "Background",
      "default": "#f1ede7"
    },
    {
      "type": "color",
      "id": "recipe_hero_bg",
      "label": "Recipe time hero",
      "default": "#0d5d52"
    },
    {
      "type": "color",
      "id": "recipe_hero_bg_mobile",
      "label": "Recipe time hero mobile",
      "default": "#C7E8B1"
    },
    {
      "type": "color",
      "id": "recipe_bottom_bg",
      "label": "Recipe time bottom",
      "default": "#c7e8b1"
    },
    {
      "type": "color",
      "id": "recipe_video_wrapper_bg",
      "label": "Recipe video wrapper desktop",
      "default": "#0d5d52"
    },
    {
      "type": "range",
      "id": "recipe_video_wrapper_opacity",
      "label": "Recipe video wrapper background opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "unit": "un",
      "default": 0.3
    },
    {
      "type": "color",
      "id": "recipe_video_wrapper_bg_mobile",
      "label": "Recipe video wrapper mobile",
      "default": "#0d5d52"
    },
    {
      "type": "range",
      "id": "recipe_video_wrapper_opacity_mobile",
      "label": "Recipe video wrapper background opacity mobile",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "unit": "un",
      "default": 1
    },
    {
      "type": "color",
      "id": "heading_bg_color",
      "label": "Heading background color",
      "default": "#0d5d52"
    },
    {
      "type": "color",
      "id": "heading_text_color",
      "label": "Heading text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Button settings"
    },
    {
      "type": "text",
      "id": "btn_label",
      "label": "Button label"
    },
    {
      "type": "url",
      "id": "btn_url",
      "label": "Button link"
    },
    {
      "type": "header",
      "content": "Dish type"
    },
    {
      "type": "text",
      "id": "handle_1",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "handle_2",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "handle_3",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "handle_4",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "handle_5",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "handle_6",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "handle_7",
      "label": "Product handle"
    },
    {
      "type": "text",
      "id": "error_message",
      "label": "Error message for add to card",
      "default": "Please select a product"
    },
    {
      "type": "header",
      "content": "Serves & Wattage option"
    },
    {
      "type": "text",
      "id": "recipe_info_options_heading",
      "label": "Options heading",
      "default": "Select your serving size and microwave wattage in the dropdown. The recipe will change accordingly."
    },
    {
      "type": "html",
      "id": "serves_title",
      "label": "Serves title"
    },
    {
      "type": "html",
      "id": "wattage_title",
      "label": "Wattage title"
    },
    {
      "type": "html",
      "id": "recommended_title",
      "label": "Recommended product title",
      "default": "<p>Recommended Dish</p>"
    },
    {
      "type": "header",
      "content": "Wattage & Power info"
    },
    {
      "type": "richtext",
      "id": "wattage_info",
      "label": "Wattage info"
    },
    {
      "type": "text",
      "id": "video_wattage",
      "info": "Only .mp4 is required for it to work. You can upload videos [here](https://cookanyday.com/admin/settings/files) to get the url",
      "label": "Video file for wattage info url .mp4"
    },
    {
      "type": "richtext",
      "id": "power_level_info",
      "label": "Power level info"
    },
    {
      "type": "text",
      "id": "video_power_level",
      "info": "Only .mp4 is required for it to work. You can upload videos [here](https://cookanyday.com/admin/settings/files) to get the url",
      "label": "Video file for power level url .mp4"
    },
    {
      "type": "header",
      "content": "Google form"
    },
    {
      "type": "checkbox",
      "id": "hide_google_form",
      "label": "Hide google form"
    },
    {
      "type": "text",
      "id": "google_form_button_label",
      "label": "Button label",
      "default": "Did you cook this recipe?"
    },
    {
      "type": "color",
      "id": "google_block_bg_desktop",
      "label": "Google block background desktop",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "google_block_bg_mobile",
      "label": "Google block background mobile",
      "default": "#D0DEF2"
    }
  ],
    "presets": [
      {
        "name": "Recipe Page"
      }
    ]
  }
{% endschema %}